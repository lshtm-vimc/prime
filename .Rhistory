colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
# plot cases (versus) year
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
# reset working directory
setwd (current_wd)
getwd ()
devtools::install (vignettes=T)
library (prime2)
pwd
getwd ()
dir ()
library(prime2)
load (data.cecx_1y_prevalence)
load (data.cecx_1y_prevalence.rda)
load ("data.cecx_1y_prevalence.rda)
q
""
"
load ("data.cecx_1y_prevalence.rda")
data ()
load (file ="data.cecx_1y_prevalence")
load (file ="data/data.cecx_1y_prevalence")
load (file ="data.cecx_1y_prevalence.rda")
load (file ="data/data.cecx_1y_prevalence.rda")
View(data.cecx_1y_prevalence)
View(data.cecx_1y_prevalence)
library (prime2)
View(data.cecx_1y_prevalence)
data ()
View (data.cecx_1y_prevalence)
# Test HPV PRIME model for 1 country or all VIMC countries
### = only to run in parallel
# load required packages
library (data.table)    # data table
library (ggplot2)       # graphics
library (tictoc)        # timing R scripts
library (foreach)       # looping -- supports parallel execution
library (doParallel)    # Foreach Parallel Adaptor for the 'parallel' Package
library (prime2)         # HPV prime model
# remove all objects from workspace
remove (list = objects() )
# save current working directory and set working directory
current_wd = getwd ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime_test")
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("coverage_201710gavi-3_hpv-routine-gavi.csv")   # all VIMC countries
# gavi_coverage <- fread ("coverage_201710gavi-5_hpv-routine-gavi.csv")   # all VIMC countries
gavi_coverage <- fread ("coverage_201809hpv-1_hpv-routine-gavi.csv")      # 1 country - China
# Read in disease burden template file
# gavi_template <- fread("2017_gavi_impact_estimates/gavi_template.csv")
# gavi_template <- fread("central-burden-template.201710gavi-5.HPV_LSHTM-Jit_standard.csv")
gavi_template <- fread("central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
# novac, and routine+campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
# novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi (gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
log_file <- "prime_log.log"
tic ()                  # track simulation time -- start
cl <- makeCluster (4)   # registering number of cores
registerDoParallel (cl) # start of parallelisation
# results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_aftersexdebut = 1
results <- BatchRun (countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 1,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa",log = log_file)
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster (cl)  # end of parallelisation
toc ()            # track simulation time -- stop
convert_results <- OutputGavi (results, calendar_year=TRUE, gavi_template=gavi_template)
# Saving output for no vaccination scenario
no_vaccination <- convert_results [scenario=="pre-vaccination"]
no_vaccination <- no_vaccination  [,colnames(gavi_template), with=F]
no_vaccination <- no_vaccination  [!is.na(deaths)]
fwrite (no_vaccination,"prime_v2_vaccination_none.csv")
# Saving output for routine vaccination scenario
vaccination <- convert_results [scenario=="post-vaccination"]
vaccination <- vaccination     [,colnames(gavi_template),with=F]
vaccination <- vaccination     [!is.na(deaths)]
fwrite (vaccination,"prime_v2_vaccination.csv")
# data = convert_results[run_id == 1 & age %in% c(30,40,50,60)],
# data = convert_results[run_id == 1 & year %in% c(2000,2020,2040,2060)]
# Plots to check validity of results
# plot cases (versus) age
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
# plot cases (versus) year
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
# reset working directory
setwd (current_wd)
getwd ()
# Test HPV PRIME model for 1 country or all VIMC countries
### = only to run in parallel
# load required packages
library (data.table)    # data table
library (ggplot2)       # graphics
library (tictoc)        # timing R scripts
library (foreach)       # looping -- supports parallel execution
library (doParallel)    # Foreach Parallel Adaptor for the 'parallel' Package
library (prime2)         # HPV prime model
# remove all objects from workspace
remove (list = objects() )
# save current working directory and set working directory
current_wd = getwd ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime2_test")
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("coverage_201710gavi-3_hpv-routine-gavi.csv")   # all VIMC countries
# gavi_coverage <- fread ("coverage_201710gavi-5_hpv-routine-gavi.csv")   # all VIMC countries
gavi_coverage <- fread ("coverage_201809hpv-1_hpv-routine-gavi.csv")      # 1 country - China
# Read in disease burden template file
# gavi_template <- fread("2017_gavi_impact_estimates/gavi_template.csv")
# gavi_template <- fread("central-burden-template.201710gavi-5.HPV_LSHTM-Jit_standard.csv")
gavi_template <- fread("central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
# novac, and routine+campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
# novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi (gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
log_file <- "prime_log.log"
tic ()                  # track simulation time -- start
cl <- makeCluster (4)   # registering number of cores
registerDoParallel (cl) # start of parallelisation
# results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_aftersexdebut = 1
results <- BatchRun (countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 1,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa",log = log_file)
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster (cl)  # end of parallelisation
toc ()            # track simulation time -- stop
convert_results <- OutputGavi (results, calendar_year=TRUE, gavi_template=gavi_template)
# Saving output for no vaccination scenario
no_vaccination <- convert_results [scenario=="pre-vaccination"]
no_vaccination <- no_vaccination  [,colnames(gavi_template), with=F]
no_vaccination <- no_vaccination  [!is.na(deaths)]
fwrite (no_vaccination,"prime_v2_vaccination_none.csv")
# Saving output for routine vaccination scenario
vaccination <- convert_results [scenario=="post-vaccination"]
vaccination <- vaccination     [,colnames(gavi_template),with=F]
vaccination <- vaccination     [!is.na(deaths)]
fwrite (vaccination,"prime_v2_vaccination.csv")
# data = convert_results[run_id == 1 & age %in% c(30,40,50,60)],
# data = convert_results[run_id == 1 & year %in% c(2000,2020,2040,2060)]
# Plots to check validity of results
# plot cases (versus) age
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
# plot cases (versus) year
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
# reset working directory
setwd (current_wd)
?BatchRun
data ()
view (data.sexual_debut)
getwd ()
load ("data/data.sexual_debut.rda")
view (data.sexual_debut)
View (data.sexual_debut)
results
no_vaccination
vaccination
# Test HPV PRIME model for 1 country or all VIMC countries
### = only to run in parallel
# load required packages
library (data.table)    # data table
library (ggplot2)       # graphics
library (tictoc)        # timing R scripts
library (foreach)       # looping -- supports parallel execution
library (doParallel)    # Foreach Parallel Adaptor for the 'parallel' Package
library (prime2)         # HPV prime model
# remove all objects from workspace
remove (list = objects() )
# save current working directory and set working directory
current_wd = getwd ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime2_test")
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("coverage_201710gavi-3_hpv-routine-gavi.csv")   # all VIMC countries
# gavi_coverage <- fread ("coverage_201710gavi-5_hpv-routine-gavi.csv")   # all VIMC countries
gavi_coverage <- fread ("coverage_201809hpv-1_hpv-routine-gavi.csv")      # 1 country - China
# Read in disease burden template file
# gavi_template <- fread("2017_gavi_impact_estimates/gavi_template.csv")
# gavi_template <- fread("central-burden-template.201710gavi-5.HPV_LSHTM-Jit_standard.csv")
gavi_template <- fread("central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
# novac, and routine+campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
# novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi (gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
log_file <- "prime_log.log"
tic ()                  # track simulation time -- start
cl <- makeCluster (4)   # registering number of cores
registerDoParallel (cl) # start of parallelisation
# results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_aftersexdebut = 1
results <- BatchRun (countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 0,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa",log = log_file)
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster (cl)  # end of parallelisation
toc ()            # track simulation time -- stop
convert_results <- OutputGavi (results, calendar_year=TRUE, gavi_template=gavi_template)
# Saving output for no vaccination scenario
no_vaccination <- convert_results [scenario=="pre-vaccination"]
no_vaccination <- no_vaccination  [,colnames(gavi_template), with=F]
no_vaccination <- no_vaccination  [!is.na(deaths)]
fwrite (no_vaccination,"prime_v2_vaccination_none.csv")
# Saving output for routine vaccination scenario
vaccination <- convert_results [scenario=="post-vaccination"]
vaccination <- vaccination     [,colnames(gavi_template),with=F]
vaccination <- vaccination     [!is.na(deaths)]
fwrite (vaccination,"prime_v2_vaccination.csv")
# data = convert_results[run_id == 1 & age %in% c(30,40,50,60)],
# data = convert_results[run_id == 1 & year %in% c(2000,2020,2040,2060)]
# Plots to check validity of results
# plot cases (versus) age
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
# plot cases (versus) year
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
# reset working directory
setwd (current_wd)
ggplot (data = convert_results[year %in% c(2070)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2030)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2040)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2050)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2080)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2090)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2100)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
plot ("plots.pdf")
# plot cases (versus) age
ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year")
# plot cases (versus) year
ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age")
dev.off ()
getwd ()
plot ("plots.pdf")
# plot cases (versus) age
print (ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year") )
# plot cases (versus) year
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
dev.off ()
# save plots to pdf file
pdf ("plots.pdf")
# plot cases (versus) age
print (ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year") )
# plot cases (versus) year
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
dev.off ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime2_test")
# save plots to pdf file
pdf ("plots.pdf")
# plot cases (versus) age
print (ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year") )
# plot cases (versus) year
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
dev.off ()
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
vignette ("introduction")
?RunCohort
RunCountry("AFG")
RunCountry("IND")
?RunCountry
?RegisterBatchDataGavi
