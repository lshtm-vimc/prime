attach (gapminder)
hist (lifeExp)
hist (pop)
hist (log (pop))
boxplot (lifeExp ~ continent)
plot (lifeExp ~ gdpPercap)
plot (lifeExp ~ log (gdpPercap))
# data maninpulation (using dplyr)
gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland") %>%
group_by (country) %>%
summarise (Avg_lifeExp = mean (lifeExp))
# t-test
df1 <- gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland")
t.test (data=df1, lifeExp ~ country)
# ggplots
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot (aes (x=log(gdpPercap), y=lifeExp, col=year, size=pop) ) +
geom_point (alpha=0.3) +
geom_smooth (method = lm) +
facet_wrap (~continent)
# linear regression
lm (lifeExp ~ log(gdpPercap))
# R programming for beginners – statistic with R (t-test and linear regression) and dplyr and ggplot
# https://www.youtube.com/watch?v=ANMuuq502rE
# load packages
library (gapminder) # gapminder data set
library (dplyr)     # data manipulation
library (stats)     # statistical functions
library (ggplot2)   # data visualisations
# data
data ("gapminder")
# analysis
summary (gapminder)
x <- mean (gapminder$gdpPercap)
x
# plots
attach (gapminder)
hist (lifeExp)
hist (pop)
hist (log (pop))
boxplot (lifeExp ~ continent)
plot (lifeExp ~ gdpPercap)
plot (lifeExp ~ log (gdpPercap))
# data maninpulation (using dplyr)
gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland") %>%
group_by (country) %>%
summarise (Avg_lifeExp = mean (lifeExp))
# t-test
df1 <- gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland")
t.test (data=df1, lifeExp ~ country)
# ggplots
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot (aes (x=log(gdpPercap), y=lifeExp, col=year, size=pop) ) +
geom_point (alpha=0.3) +
geom_smooth (method = lm) +
facet_wrap (~continent)
# linear regression
lm (lifeExp ~ log(gdpPercap))
summary (lm (lifeExp ~ log(gdpPercap) ))
# R programming for beginners – statistic with R (t-test and linear regression) and dplyr and ggplot
# https://www.youtube.com/watch?v=ANMuuq502rE
# load packages
library (gapminder) # gapminder data set
library (dplyr)     # data manipulation
library (stats)     # statistical functions
library (ggplot2)   # data visualisations
# data
data ("gapminder")
# analysis
summary (gapminder)
x <- mean (gapminder$gdpPercap)
x
# plots
attach (gapminder)
hist (lifeExp)
hist (pop)
hist (log (pop))
boxplot (lifeExp ~ continent)
plot (lifeExp ~ gdpPercap)
plot (lifeExp ~ log (gdpPercap))
# data maninpulation (using dplyr)
gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland") %>%
group_by (country) %>%
summarise (Avg_lifeExp = mean (lifeExp))
# t-test
df1 <- gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland")
t.test (data=df1, lifeExp ~ country)
# ggplots
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot (aes (x=log(gdpPercap), y=lifeExp, col=year, size=pop) ) +
geom_point (alpha=0.3) +
geom_smooth (method = lm) +
facet_wrap (~continent)
# linear regression
lm (lifeExp ~ log(gdpPercap))
summary (lm (lifeExp ~ log(gdpPercap) ))
summary (lm (lifeExp ~ log(gdpPercap) + pop ))
# R programming for beginners – statistic with R (t-test and linear regression) and dplyr and ggplot
# https://www.youtube.com/watch?v=ANMuuq502rE
# load packages
library (gapminder) # gapminder data set
library (dplyr)     # data manipulation
library (stats)     # statistical functions
library (ggplot2)   # data visualisations
# data
data ("gapminder")
# analysis
summary (gapminder)
x <- mean (gapminder$gdpPercap)
x
# plots
attach (gapminder)
hist (lifeExp)
hist (pop)
hist (log (pop))
boxplot (lifeExp ~ continent)
plot (lifeExp ~ gdpPercap)
plot (lifeExp ~ log (gdpPercap))
# data maninpulation (using dplyr)
gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland") %>%
group_by (country) %>%
summarise (Avg_lifeExp = mean (lifeExp))
# t-test
df1 <- gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland")
t.test (data=df1, lifeExp ~ country)
# ggplots
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot (aes (x=log(gdpPercap), y=lifeExp, col=year, size=pop) ) +
geom_point (alpha=0.3) +
geom_smooth (method = lm) +
facet_wrap (~continent)
# linear regression
lm (lifeExp ~ log(gdpPercap))
summary (lm (lifeExp ~ log(gdpPercap) ))
summary (lm (lifeExp ~ log(gdpPercap) + log(pop) ))
# R programming for beginners – statistic with R (t-test and linear regression) and dplyr and ggplot
# https://www.youtube.com/watch?v=ANMuuq502rE
# load packages
library (gapminder) # gapminder data set
library (dplyr)     # data manipulation
library (stats)     # statistical functions
library (ggplot2)   # data visualisations
# data
data ("gapminder")
# analysis
summary (gapminder)
x <- mean (gapminder$gdpPercap)
x
# plots
attach (gapminder)
hist (lifeExp)
hist (pop)
hist (log (pop))
boxplot (lifeExp ~ continent)
plot (lifeExp ~ gdpPercap)
plot (lifeExp ~ log (gdpPercap))
# data maninpulation (using dplyr)
gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland") %>%
group_by (country) %>%
summarise (Avg_lifeExp = mean (lifeExp))
# t-test
df1 <- gapminder %>%
select (country, lifeExp) %>%
filter (country == "South Africa" | country == "Ireland")
t.test (data=df1, lifeExp ~ country)
# ggplots
gapminder %>%
filter (gdpPercap < 50000) %>%
ggplot (aes (x=log(gdpPercap), y=lifeExp, col=year, size=pop) ) +
geom_point (alpha=0.3) +
geom_smooth (method = lm) +
facet_wrap (~continent)
# linear regression
lm (lifeExp ~ log(gdpPercap))
summary (lm (lifeExp ~ log(gdpPercap) ))
summary (lm (lifeExp ~ log(gdpPercap) + log(pop) ))
getwd ()
library(prime2)
?data.valid
?data.cecx_1y_prevalence
library(prime2)
?data.cecx_1y_prevalence
?data.cecx_3y_prevalence
?data.cecx_5y_prevalence
library(prime2)
?data.cecx_5y_prevalence
?data.cecx_5y_prevalence
?data.cecx_5y_prevalence
library(prime2)
?data.cecx_3y_prevalence
library(prime2)
library(prime2)
?data.cecx_5y_prevalence
summary (data.costcecx)
summary (data.cecx_5y_prevalence)
library(prime2)
summary (data.cecx_5y_prevalence)
?data.cecx_5y_prevalence
?data.costcecx
library(prime2)
?data.costcecx
data.costcecx
data.countryname
summary (data.countryname)
data.costcecx
library(prime2)
?package.prime2
??package.prime2
package?prime2
library(prime2)
library(prime2)
package?prime2
library(prime2)
package?prime2
library(prime2)
package?prime2
library(prime2)
package?prime2
library(prime2)
package?prime2
?prime
?data.countryname
data.countryname
?data.countryname
data.global
colnames (data.global)
summary (data.global)
colnames (data.global)
data.global
summary (data.global$`WHO Region`)
summary (data.global$Country)
ls ()
names (data.global)
str (data.global)
levels (data.global$`WHO Region`)
dim (data.global)
class (data.global)
class (data.global$`GAVI Eligibility`)
data.global
?data.global
?data.global
#' Global data table
#'
#' A dataset containing a global range of variables.
#'
#' @format A data table with 194 observations of 35 variables (194 row * 35 col).
#' \describe{
#'   \item{Country}{Country name}
#'   \item{iso2}{ISO2 country code}
#' }
"data.countryname"
?data.countryname
library(prime2)
?data.valid
?data.valid
?data.valid
library(prime2)
?data.valid
?data.valid
?data.valid
?data.valid
?data.valid
?data.valid
?data.valid
?data.global
?data.valid
?data.global
?data.valid
getwd ()
package?prime2
package?prime2
getwd ()
# Test HPV PRIME model for 1 country or all VIMC countries
### = only to run in parallel
# load required packages
library (data.table)    # data table
library (ggplot2)       # graphics
library (tictoc)        # timing R scripts
library (foreach)       # looping -- supports parallel execution
library (doParallel)    # Foreach Parallel Adaptor for the 'parallel' Package
library (prime2)         # HPV prime model
# remove all objects from workspace
remove (list = objects() )
# save current working directory and set working directory
current_wd = getwd ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime2_test")
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("coverage_201710gavi-3_hpv-routine-gavi.csv")   # all VIMC countries
# gavi_coverage <- fread ("coverage_201710gavi-5_hpv-routine-gavi.csv")   # all VIMC countries
gavi_coverage <- fread ("coverage_201809hpv-1_hpv-routine-gavi.csv")      # 1 country - China
# Read in disease burden template file
# gavi_template <- fread("2017_gavi_impact_estimates/gavi_template.csv")
# gavi_template <- fread("central-burden-template.201710gavi-5.HPV_LSHTM-Jit_standard.csv")
gavi_template <- fread("central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
# novac, and routine+campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
# novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi (gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
log_file <- "prime_log.log"
tic ()                  # track simulation time -- start
cl <- makeCluster (4)   # registering number of cores
registerDoParallel (cl) # start of parallelisation
# results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_after sexdebut = 1
results <- BatchRun (countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 0,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa",log = log_file)
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster (cl)  # end of parallelisation
toc ()            # track simulation time -- stop
convert_results <- OutputGavi (results, calendar_year=TRUE, gavi_template=gavi_template)
# Saving output for no vaccination scenario
no_vaccination <- convert_results [scenario=="pre-vaccination"]
no_vaccination <- no_vaccination  [,colnames(gavi_template), with=F]
no_vaccination <- no_vaccination  [!is.na(deaths)]
fwrite (no_vaccination,"prime_v2_vaccination_none.csv")
# Saving output for routine vaccination scenario
vaccination <- convert_results [scenario=="post-vaccination"]
vaccination <- vaccination     [,colnames(gavi_template),with=F]
vaccination <- vaccination     [!is.na(deaths)]
fwrite (vaccination,"prime_v2_vaccination.csv")
# data = convert_results[run_id == 1 & age %in% c(30,40,50,60)],
# data = convert_results[run_id == 1 & year %in% c(2000,2020,2040,2060)]
# Plots to check validity of results
# save plots to pdf file
pdf ("plots.pdf")
# plot cases (versus) age
print (ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year") )
# plot cases (versus) year
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
dev.off ()
# reset working directory
setwd (current_wd)
data.mortall
summary (data.mortall)
names (data.mortall)
dim (data.mortall)
data.mortall$`Country ¦ Age [12]`
names (data.mortall)
data.cecx_1y_prevalence
names (data.cecx_1y_prevalence)
?prime2-`prime2-package`
?prime2-package
?package?prime2
package?prime2
package?prime
package?prime2
?data.incidence
data.incidence
?data.incidence
?data.mortcecx
?data.mortcecx
?data.incidence
names (data.incidence)
dim (data.incidence)
data.cecx_incidence
data.incidence
dim (data.incidence)
dim (data.cecx_incidence)
getwd ()
setwd (./data)
getwd ()
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2/data")
load (file = "incidence.rda")
load (file = "data.incidence.rda")
View(data.cecx_incidence)
View(data.cecx_incidence)
View(data.cecx_incidence)
getwd ()
data.incidence2012 <- load (file = "data.incidence2012.rda")
data.incidence2012
clear
clear ()
data.incidence2012
data.incidence
data.incidence2012 <- data.incidence
data.incidence2012
save (data.incidence2012, file="data.incidence2012.rda")
rm (list=ls())
data.incidence
data.indidence2012
load (file = "data.incidence2012.rda")
data.incidence2012
dim (data.incidence2012)
rm (list=ls())
data.cecx_incidence
load (file = "data.incidence")
load (file = "data.incidence.rda")
data.incidence <- data.cecx_incidence
save (data.incidence, file = "data.incidence.rda")
rm (list=ls())
load (file="data.incidence.rda")
?data.incidence
getwd ()
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2")
data.incidence
dim (data.incidence)
dim (data.incidence2012)
data.mortcecx
rm (list = ls ())
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2/data")
data.mortcecx
data.mortcecx2012 <- data.mortcecx
save (data.mortcecx2012, file="data.mortcecx2012.rda")
data.mortcecx
data.cecx_deaths
data.mortcecx <- data.cecx_deaths
save (data.mortcecx, file = "data.mortcecx.rda")
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2")
data.mortcecx
dim (data.mortcecx)
dim (data.mortcecx2012)
data.mortcecx
?data.mortcecx
?data.incidence
dim (data.incidence)
dim (data.mortcecx)
dim (data.mortall)
data.mortall
getwd ()
dim (data.mortall)
names (data.mortall)
data.mortall
data.mortall$V103
data.mortall$V104
data.mortall$V105
data.mortall$V106
?data.mortall
names (data.mortall.unwpp.mx)
data.mortall.unwpp.mx
dim (data.mortall.unwpp.mx)
names (data.mortall.unwpp.mx)
head (data.mortall.unwpp.mx)
package?prime2
?writelog
?RunCountry
browseVignettes(package="prime2")
browseVignettes()
getwd ()
devtools::install ()
library (prime2)
browseVignettes(package="prime2")
vignette (all=T)
devtools::install (build_vignettes = T)
library (prime2)
browseVignettes(package = "prime2")
package?prime2
package?prime2
package?prime2
package?prime2
package?prime2
package?prime2
package?prime2
package?prime2
