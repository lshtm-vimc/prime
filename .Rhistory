colnames (prev_table)  [colnames(prev_table)=="crude_rate_copy"] <- age_colname
}
# colnames for 1-year age intervals (starting age)
age_colname = as.character (5 * (i-1) )
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate"] <- age_colname
# merge newly read table to global table
cecx_incidence  = merge (cecx_incidence, inc_table, by = "Country", all = TRUE)
cecx_deaths     = merge (cecx_deaths, deaths_table, by = "Country", all = TRUE)
cecx_prevalence = merge (cecx_prevalence, prev_table, by = "Country", all = TRUE)
}
View(cecx_deaths)
View(cecx_deaths)
View(cecx_incidence)
View(cecx_incidence)
View(cecx_prevalence)
View(cecx_prevalence)
# Program to combine globocan data.
# This script takes input of incidence/deaths/prevalence from separate files of
# 5-year age intervals and creates a single 1-year age interval file each for
# incidence/deaths/prevalence.
# remove all objects from workspace
remove (list = objects() )
# load required packages
library (data.table)  # data table
library (dplyr)       # data wrangling
library (countrycode) # country names and ISO3 codes
# Input format of 1-year age interval file:
# Population (World/Country name) | Number | Uncertainty interval | Crude Rate* | ASR (World)* | Cum. risk**
# Output format of 1-year age interval file:
# Country | 0 | 1 | 2 | ... | 100 | iso3
# Input file names
# Incidence: cecx_inc_0-4.csv / cecx_inc_5-9.csv / ... / cecx_inc_80-84.csv / cecx_inc_85plus.csv
# Deaths: cecx_deaths_0-4.csv / cecx_deaths_5-9.csv / ... / cecx_deaths_80-84.csv / cecx_deaths_85plus.csv
# Prevalence (5-year): cecx_5y_prev_0-4.csv / cecx_5y_prev_5-9.csv / ... / cecx_5y_prev_80-84.csv / cecx_5y_prev_85plus.csv
# Output file names
# Incidence: cecx_incidence
# Deaths: cecx_deaths
# Prevalence (5-year): cecx_prevalence
wd = getwd ()  # save current working directory
# incidence file directory -- C:\Users\kajam\Google Drive\lshtm\hpv\globocan_2018\incidence
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/incidence")
inc_filenames = c ("cecx_inc_0-4.csv", "cecx_inc_5-9.csv", "cecx_inc_10-14.csv", "cecx_inc_15-19.csv",
"cecx_inc_20-24.csv", "cecx_inc_25-29.csv", "cecx_inc_30-34.csv", "cecx_inc_35-39.csv",
"cecx_inc_40-44.csv", "cecx_inc_45-49.csv", "cecx_inc_50-54.csv", "cecx_inc_55-59.csv",
"cecx_inc_60-64.csv", "cecx_inc_65-69.csv", "cecx_inc_70-74.csv", "cecx_inc_75-79.csv",
"cecx_inc_80-84.csv", "cecx_inc_85plus.csv")
# deaths file directory -- C:\Users\kajam\Google Drive\lshtm\hpv\globocan_2018\deaths
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/deaths")
deaths_filenames = c ("cecx_deaths_0-4.csv", "cecx_deaths_5-9.csv", "cecx_deaths_10-14.csv", "cecx_deaths_15-19.csv",
"cecx_deaths_20-24.csv", "cecx_deaths_25-29.csv", "cecx_deaths_30-34.csv", "cecx_deaths_35-39.csv",
"cecx_deaths_40-44.csv", "cecx_deaths_45-49.csv", "cecx_deaths_50-54.csv", "cecx_deaths_55-59.csv",
"cecx_deaths_60-64.csv", "cecx_deaths_65-69.csv", "cecx_deaths_70-74.csv", "cecx_deaths_75-79.csv",
"cecx_deaths_80-84.csv", "cecx_deaths_85plus.csv")
# 5-year prevalence file directory -- C:\Users\kajam\Google Drive\lshtm\hpv\globocan_2018\prevalence\5_year
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/prevalence/5_year")
prev_filenames = c ("cecx_5y_prev_0-4.csv",  "cecx_5y_prev_5-9.csv",   "cecx_5y_prev_10-14.csv", "cecx_5y_prev_15-19.csv",
"cecx_5y_prev_20-24.csv", "cecx_5y_prev_25-29.csv", "cecx_5y_prev_30-34.csv", "cecx_5y_prev_35-39.csv",
"cecx_5y_prev_40-44.csv", "cecx_5y_prev_45-49.csv", "cecx_5y_prev_50-54.csv", "cecx_5y_prev_55-59.csv",
"cecx_5y_prev_60-64.csv", "cecx_5y_prev_65-69.csv", "cecx_5y_prev_70-74.csv", "cecx_5y_prev_75-79.csv",
"cecx_5y_prev_80-84.csv", "cecx_5y_prev_85plus.csv")
# loop through the globocan data files -- incidence/deaths/prevalence
for (i in 1:1)
{
# read globocan incidence/deaths/prevalence data files
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/incidence")
inc    = fread (inc_filenames [i],    sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/deaths")
deaths = fread (deaths_filenames [i], sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/prevalence/5_year")
prev   = fread (prev_filenames [i],   sep = ",", header= T)
# create table to extract the requisite columns
inc_table <- data.table (inc [,1])             # country names -- column name is "World"
deaths_table <- data.table (deaths [,1])
prev_table <- data.table (prev [,1])
colnames(inc_table)   [colnames(inc_table)   =="World"] <- "Country"  # rename 1st column to country name
colnames(deaths_table)[colnames(deaths_table)=="World"] <- "Country"
colnames(prev_table)  [colnames(prev_table)  =="World"] <- "Country"
# incidence rate
inc_table$crude_rate = inc [,4]                             # rate per 100,000 women
inc_table$crude_rate = inc_table$crude_rate / 100000        # rate per woman
# death rate
deaths_table$crude_rate = deaths [,4]                       # rate per 100,000 women
deaths_table$crude_rate = deaths_table$crude_rate / 100000  # rate per woman
# prevalence (5-year)
prev_table$crude_rate = prev [,3]                           # rate per 100,000 women
prev_table$crude_rate = prev_table$crude_rate / 100000      # rate per woman
# copy the incidence/deaths/prevalence values to other ages within this 5-year age group
for (j in (5*(i-1) +1) : (5*(i-1) +4) )
{
# copy of incidence/deaths/prevalence values for this age group
inc_table$crude_rate_copy    = inc_table$crude_rate
deaths_table$crude_rate_copy = deaths_table$crude_rate
prev_table$crude_rate_copy   = prev_table$crude_rate
# colnames for 1-year age intervals (remaining ages)
age_colname = as.character (j)
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate_copy"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate_copy"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate_copy"] <- age_colname
}
# colnames for 1-year age intervals (starting age)
age_colname = as.character (5 * (i-1) )
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate"] <- age_colname
}
# global incidence/deaths/prevalence table for all ages
cecx_incidence  = inc_table
cecx_deaths     = deaths_table
cecx_prevalence = prev_table
# loop through the globocan data files -- incidence/deaths/prevalence
for (i in 2:17)
{
# read globocan incidence/deaths/prevalence data files
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/incidence")
inc    = fread (inc_filenames [i],    sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/deaths")
deaths = fread (deaths_filenames [i], sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/prevalence/5_year")
prev   = fread (prev_filenames [i],   sep = ",", header= T)
# create table to extract the requisite columns
inc_table <- data.table (inc [,1])             # country names -- column name is "World"
deaths_table <- data.table (deaths [,1])
prev_table <- data.table (prev [,1])
colnames(inc_table)   [colnames(inc_table)   =="World"] <- "Country"  # rename 1st column to country name
colnames(deaths_table)[colnames(deaths_table)=="World"] <- "Country"
colnames(prev_table)  [colnames(prev_table)  =="World"] <- "Country"
# incidence rate
inc_table$crude_rate = inc [,4]                             # rate per 100,000 women
inc_table$crude_rate = inc_table$crude_rate / 100000        # rate per woman
# death rate
deaths_table$crude_rate = deaths [,4]                       # rate per 100,000 women
deaths_table$crude_rate = deaths_table$crude_rate / 100000  # rate per woman
# prevalence (5-year)
prev_table$crude_rate = prev [,3]                           # rate per 100,000 women
prev_table$crude_rate = prev_table$crude_rate / 100000      # rate per woman
# copy the incidence/deaths/prevalence values to other ages within this 5-year age group
for (j in (5*(i-1) +1) : (5*(i-1) +4) )
{
# copy of incidence/deaths/prevalence values for this age group
inc_table$crude_rate_copy    = inc_table$crude_rate
deaths_table$crude_rate_copy = deaths_table$crude_rate
prev_table$crude_rate_copy   = prev_table$crude_rate
# colnames for 1-year age intervals (remaining ages)
age_colname = as.character (j)
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate_copy"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate_copy"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate_copy"] <- age_colname
}
# colnames for 1-year age intervals (starting age)
age_colname = as.character (5 * (i-1) )
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate"] <- age_colname
# merge newly read table to global table
cecx_incidence  = merge (cecx_incidence, inc_table, by = "Country", all = TRUE)
cecx_deaths     = merge (cecx_deaths, deaths_table, by = "Country", all = TRUE)
cecx_prevalence = merge (cecx_prevalence, prev_table, by = "Country", all = TRUE)
}
# loop through the globocan data files -- incidence/deaths/prevalence
for (i in 18:18)
{
# read globocan incidence/deaths/prevalence data files
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/incidence")
inc    = fread (inc_filenames [i],    sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/deaths")
deaths = fread (deaths_filenames [i], sep = ",", header= T)
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/prevalence/5_year")
prev   = fread (prev_filenames [i],   sep = ",", header= T)
# create table to extract the requisite columns
inc_table <- data.table (inc [,1])             # country names -- column name is "World"
deaths_table <- data.table (deaths [,1])
prev_table <- data.table (prev [,1])
colnames(inc_table)   [colnames(inc_table)   =="World"] <- "Country"  # rename 1st column to country name
colnames(deaths_table)[colnames(deaths_table)=="World"] <- "Country"
colnames(prev_table)  [colnames(prev_table)  =="World"] <- "Country"
# incidence rate
inc_table$crude_rate = inc [,4]                             # rate per 100,000 women
inc_table$crude_rate = inc_table$crude_rate / 100000        # rate per woman
# death rate
deaths_table$crude_rate = deaths [,4]                       # rate per 100,000 women
deaths_table$crude_rate = deaths_table$crude_rate / 100000  # rate per woman
# prevalence (5-year)
prev_table$crude_rate = prev [,3]                           # rate per 100,000 women
prev_table$crude_rate = prev_table$crude_rate / 100000      # rate per woman
# copy the incidence/deaths/prevalence values to other ages within this 5-year age group
for (j in (5*(i-1) +1) : (5*(i-1) +15) )
{
# copy of incidence/deaths/prevalence values for this age group
inc_table$crude_rate_copy    = inc_table$crude_rate
deaths_table$crude_rate_copy = deaths_table$crude_rate
prev_table$crude_rate_copy   = prev_table$crude_rate
# colnames for 1-year age intervals (remaining ages)
age_colname = as.character (j)
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate_copy"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate_copy"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate_copy"] <- age_colname
}
# colnames for 1-year age intervals (starting age)
age_colname = as.character (5 * (i-1) )
# rename crude rate column to specific age
colnames (inc_table)   [colnames(inc_table)=="crude_rate"] <- age_colname
colnames (deaths_table)[colnames(deaths_table)=="crude_rate"] <- age_colname
colnames (prev_table)  [colnames(prev_table)=="crude_rate"] <- age_colname
# merge newly read table to global table
cecx_incidence  = merge (cecx_incidence, inc_table, by = "Country", all = TRUE)
cecx_deaths     = merge (cecx_deaths, deaths_table, by = "Country", all = TRUE)
cecx_prevalence = merge (cecx_prevalence, prev_table, by = "Country", all = TRUE)
}
# reset to the working directory
setwd ("C:/Users/kajam/Google\ Drive/lshtm/hpv/globocan_2018/code")
# custom matches for some countries that do not have ISO3 country codes in countrycode package
custom_match <- c('France, Guadeloupe' = 'GLP',
'France, La Réunion' = 'REU',
'France, New Caledonia' = 'NCL',
'Korea, Democratic Republic of' = 'PRK')
# add ISO-3 country code column
cecx_incidence$iso3 = countrycode (cecx_incidence$Country, 'country.name', 'iso3c', custom_match = custom_match)
# save rda file -- global incidence
save(cecx_incidence, file = "cecx_incidence.rda")
View(cecx_incidence)
View(cecx_incidence)
View(cecx_prevalence)
View(cecx_prevalence)
View(cecx_deaths)
View(cecx_deaths)
source('C:/Users/kajam/Google Drive/lshtm/hpv/globocan_2018/code/combine_globocan_data.R')
View(cecx_deaths)
View(cecx_deaths)
View(cecx_incidence)
View(cecx_incidence)
View(cecx_prevalence)
View(cecx_prevalence)
remove (list = objects() )
source('C:/Users/kajam/Google Drive/lshtm/hpv/globocan_2018/code/combine_globocan_data.R')
remove (list = objects() )
load("C:/Users/kajam/Google Drive/lshtm/hpv/globocan_2018/global_estimates/cecx_incidence.rda")
View(cecx_incidence)
View(cecx_incidence)
load("C:/Users/kajam/Google Drive/lshtm/hpv/globocan_2018/global_estimates/cecx_deaths.rda")
View(cecx_deaths)
View(cecx_deaths)
load("C:/Users/kajam/Google Drive/lshtm/hpv/globocan_2018/global_estimates/cecx_prevalence.rda")
View(cecx_prevalence)
View(cecx_prevalence)
### = only to run in parallel
library(data.table)
library(prime)
library(tictoc)
library(foreach)
library(ggplot2)
library(doParallel)
# remove all objects from workspace
remove (list = objects() )
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("D:/lsh1604011/workspace/BAKhpv_prime/2017_gavi_impact_estimates/coverage_201710gavi-3_hpv-routine-gavi.csv")
gavi_coverage <- fread ("C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/coverage_201809hpv-1_hpv-routine-gavi.csv")
# Read in disease burden template file
# gavi_template <- fread("D:/lsh1604011/workspace/BAKhpv_prime/2017_gavi_impact_estimates/gavi_template.csv")
gavi_template <- fread("C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
#novac, and routine+campaign
#RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
#novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
# log <- "D:/lsh1604011/workspace/prime_log.log"
log_file <- "C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/prime_log.log"
tic()   # track simulation time -- start
cl <- makeCluster(4) # registering number of cores
registerDoParallel(cl) # start of parallelisation
#results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_aftersexdebut = 1
results <- BatchRun(countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 1,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa")
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster(cl)    # end of parallelisation
toc()   # track simulation time -- stop
results
### = only to run in parallel
library(data.table)
library(prime)
library(tictoc)
library(foreach)
library(ggplot2)
library(doParallel)
# remove all objects from workspace
remove (list = objects() )
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("D:/lsh1604011/workspace/BAKhpv_prime/2017_gavi_impact_estimates/coverage_201710gavi-3_hpv-routine-gavi.csv")
gavi_coverage <- fread ("C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/coverage_201809hpv-1_hpv-routine-gavi.csv")
# Read in disease burden template file
# gavi_template <- fread("D:/lsh1604011/workspace/BAKhpv_prime/2017_gavi_impact_estimates/gavi_template.csv")
gavi_template <- fread("C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
#novac, and routine+campaign
#RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
#novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
# log <- "D:/lsh1604011/workspace/prime_log.log"
log_file <- "C:/Users/kajam/Google Drive/lshtm/hpv/vimc-request/19Sep2018/prime_log.log"
tic()   # track simulation time -- start
cl <- makeCluster(4) # registering number of cores
registerDoParallel(cl) # start of parallelisation
#results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_aftersexdebut = 1
results <- BatchRun(countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 1,
by_calendaryear = TRUE, use_proportions = TRUE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa")
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster(cl)    # end of parallelisation
toc()   # track simulation time -- stop
results
gavi_coverage
### = only to run in parallel
library(data.table)
library(prime)
library(tictoc)
library(foreach)
library(ggplot2)
library(doParallel)
# remove all objects from workspace
remove (list = objects() )
install.packages ("doMPI")
install.packages ("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("knitr")
getwd ()
getwd ()
setwd ("C:\Users\kajam\OneDrive\Documents\GitHub\prime2")
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2")
library (prime2)
# Test HPV PRIME model for 1 country or all VIMC countries
### = only to run in parallel
# load required packages
library (data.table)    # data table
library (ggplot2)       # graphics
library (tictoc)        # timing R scripts
library (foreach)       # looping -- supports parallel execution
library (doParallel)    # Foreach Parallel Adaptor for the 'parallel' Package
library (prime2)         # HPV prime model
# remove all objects from workspace
remove (list = objects() )
# save current working directory and set working directory
current_wd = getwd ()
setwd ("C:/Users/kajam/Google Drive/lshtm/hpv/prime2_test")
# Read in gavi vaccination coverage file
# gavi_coverage <- fread ("coverage_201710gavi-3_hpv-routine-gavi.csv")   # all VIMC countries
# gavi_coverage <- fread ("coverage_201710gavi-5_hpv-routine-gavi.csv")   # all VIMC countries
gavi_coverage <- fread ("coverage_201809hpv-1_hpv-routine-gavi.csv")      # 1 country - China
# Read in disease burden template file
# gavi_template <- fread("2017_gavi_impact_estimates/gavi_template.csv")
# gavi_template <- fread("central-burden-template.201710gavi-5.HPV_LSHTM-Jit_standard.csv")
gavi_template <- fread("central-burden-template.201809hpv-1.HPV_LSHTM-Jit_standard-China-only.csv")
# novac, and routine+campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,T,T,T)
# novac, and campaign
# RegisterBatchData(gavi_coverage,gavi_template,T,F,T,T)
# reporting years of disease burden
# reporting_years = c (2000:2030)
# Register batch data
# RegisterBatchData(gavi_coverage, reporting_years = -1, T)
# RegisterBatchDataGavi(gavi_coverage, gavi_template, use_campaigns = F,
#                      use_routine = T, restrict_to_coverage_data = T, force = T, psa=0)
RegisterBatchDataGavi (gavi_coverage, gavi_template, use_campaigns = F,
use_routine = T, restrict_to_coverage_data = F, force = T, psa=0)
# log file to keep track of simulation run
log_file <- "prime_log.log"
tic ()                  # track simulation time -- start
cl <- makeCluster (4)   # registering number of cores
registerDoParallel (cl) # start of parallelisation
# results <- BatchRun(unwpp_mortality=TRUE, log=log)
# results <- BatchRun(unwpp_mortality=TRUE)
# 2018 onwards to take care of sexual debut -- vaccine_efficacy_aftersexdebut = 0
# upto 2017 -- vaccine_efficacy_after sexdebut = 1
results <- BatchRun (countries = -1, coverage = -1, agevac = -1,
agecohort = -1, canc.inc = "2012", daly.canc.diag = 0.08,
daly.canc.terminal = 0.78, sens = -1, unwpp_mortality = TRUE,
year_born = -1, year_vac = -1, runs = 1,
vaccine_efficacy_beforesexdebut = 1,
vaccine_efficacy_aftersexdebut = 0,
by_calendaryear = TRUE, use_proportions = FALSE,
analyseCosts = FALSE, psa = 0, psa_vals = ".data.batch.psa",log = log_file)
# results <- BatchRun(
#  unwpp_mortality = TRUE,
#   vaccine_efficacy_beforesexdebut = 1,
#  vaccine_efficacy_aftersexdebut = 1,
#  by_calendaryear = TRUE,
#  use_proportions = FALSE
# )
stopCluster (cl)  # end of parallelisation
toc ()            # track simulation time -- stop
convert_results <- OutputGavi (results, calendar_year=TRUE, gavi_template=gavi_template)
# Saving output for no vaccination scenario
no_vaccination <- convert_results [scenario=="pre-vaccination"]
no_vaccination <- no_vaccination  [,colnames(gavi_template), with=F]
no_vaccination <- no_vaccination  [!is.na(deaths)]
fwrite (no_vaccination,"prime_v2_vaccination_none.csv")
# Saving output for routine vaccination scenario
vaccination <- convert_results [scenario=="post-vaccination"]
vaccination <- vaccination     [,colnames(gavi_template),with=F]
vaccination <- vaccination     [!is.na(deaths)]
fwrite (vaccination,"prime_v2_vaccination.csv")
# data = convert_results[run_id == 1 & age %in% c(30,40,50,60)],
# data = convert_results[run_id == 1 & year %in% c(2000,2020,2040,2060)]
# Plots to check validity of results
# save plots to pdf file
pdf ("plots.pdf")
# plot cases (versus) age
print (ggplot (data = convert_results[year %in% c(2060)],
aes(x = age,
y = cases/cohort_size *1000,
colour = factor (year),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "year") )
# plot cases (versus) year
print (ggplot (data = convert_results[age %in% c(30, 40, 50, 60)],
aes(x = year,
y = cases/cohort_size *1000,
colour = factor (age),
linetype = factor (scenario, levels = c ("pre-vaccination", "post-vaccination")))) +
geom_line (size=1) +
facet_wrap ("country", scales = "free") + theme_bw () + theme(legend.position = "bottom") +
labs (linetype = "scenario", colour = "age") )
dev.off ()
# reset working directory
setwd (current_wd)
library (prime2)
?writelog
library (prime2)
?writelog
?writelog
?print
?writelog
library (prime2)
?writelog
setwd ("C:/Users/kajam/OneDrive/Documents/GitHub/prime2")
devtools::install (vignettes = T)
library (prime2)
?writelog
?writelog
library (prime2)
?writelog
?RegisterBatchData
?RegisterBatchDataGavi
?BatchRun
?OutputGavi
?RunCohort
?OutputGavi
?RunCohort
?RunCountry
?getISO3
?analyseCosts
?checkSize
?lifeTable
?ageCoverage
?warningSexDebut
?propSexDebut
library (prime2)
getwd ()
